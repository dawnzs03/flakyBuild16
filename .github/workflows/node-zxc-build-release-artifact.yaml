##
# Copyright (C) 2022-2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "Z-Node XC: Build Release Artifact"
on:
  push:
    branches: [ hedera-services ]



























































jobs:
  Artifact:
    name: ${{ inputs.custom-job-label || 'Artifact' }}
    runs-on: [self-hosted, Linux, large, ephemeral]
    outputs:
      version: ${{ steps.effective-version.outputs.number }}
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Install Deterministic Zip Tooling
        run: |
          echo "::group::Download Binary"
          sudo curl -L -o /usr/local/bin/deterministic-zip https://github.com/timo-reymann/deterministic-zip/releases/download/1.2.0/deterministic-zip_linux-amd64
          echo "::endgroup::"
          echo "::group::Change Binary Permissions"
          sudo chmod -v +x /usr/local/bin/deterministic-zip
          echo "::endgroup::"
          echo "::group::Show Binary Version Info"
          deterministic-zip --version
          echo "::endgroup::"

      - name: Install JSON Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi

          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi

          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi

          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/' '-' | tr '_' '.')"

          COMMIT_PREFIX="adhoc"
          [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && COMMIT_PREFIX="${BRANCH_NAME_SAFE}"

          echo "branch-name=${BRANCH_NAME}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-lower=${BRANCH_NAME_LOWER}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-safe=${BRANCH_NAME_SAFE}" >>"${GITHUB_OUTPUT}"
          echo "commit-prefix=${COMMIT_PREFIX}" >>"${GITHUB_OUTPUT}"
          echo "commit-id=${{ github.sha }}" >>"${GITHUB_OUTPUT}"
          echo "commit-id-short=$(echo "${{ github.sha }}" | cut -c1-8)" >>"${GITHUB_OUTPUT}"

      - name: Verify Version Update (As Specified)
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        run: |
          VALID_VERSION="$(semver validate "${{ inputs.new-version }}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${{ inputs.new-version }}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

      - name: Checkout Code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # pin@v1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # pin@v1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}

      - name: Setup Java
        uses: actions/setup-java@1df8dbefe2a8cbc99770194893dd902763bee34b # pin@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@3fbe033aaae657f011f88f29be9e65ed26bd29ef # pin@v2
        with:
          build-root-directory: hedera-node
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Gradle Update Version (As Specified)
        uses: gradle/gradle-build-action@3fbe033aaae657f011f88f29be9e65ed26bd29ef # pin@v2
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        with:
          arguments: versionAsSpecified -PnewVersion=${{ inputs.new-version }} --scan

      - name: Gradle Update Version (Branch Commit)
        uses: gradle/gradle-build-action@3fbe033aaae657f011f88f29be9e65ed26bd29ef # pin@v2
        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        with:
          arguments: versionAsPrefixedCommit -PcommitPrefix=${{ steps.parameters.outputs.commit-prefix }} --scan

      - name: Gradle Version Summary
        uses: gradle/gradle-build-action@3fbe033aaae657f011f88f29be9e65ed26bd29ef # pin@v2
        with:
          arguments: githubVersionSummary --scan

      - name: Gradle Assemble
        id: gradle-build
        uses: gradle/gradle-build-action@3fbe033aaae657f011f88f29be9e65ed26bd29ef # pin@v2
        with:
          arguments: -p hedera-node assemble --scan

      - name: Compute Final Effective Version
        id: effective-version
        run: |
          EFF_VERSION="$(./gradlew showVersion --quiet | tr -d '[:space:]')"
          echo "number=${EFF_VERSION}" >>"${GITHUB_OUTPUT}"

      - name: Cache Build Artifacts
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # pin@v3
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          path: ~/artifact-build
          key: node-build-artifacts-${{ steps.effective-version.outputs.number }}-${{ github.sha }}

      - name: Stage Artifact Build Folder
        id: artifact-staging
        run: |
          BUILD_BASE_DIR="${HOME}/artifact-build"
          mkdir -p "${BUILD_BASE_DIR}/data/lib"
          mkdir -p "${BUILD_BASE_DIR}/data/apps"

          cp -f hedera-node/data/lib/*.jar "${BUILD_BASE_DIR}/data/lib"
          cp -f hedera-node/data/apps/*.jar "${BUILD_BASE_DIR}/data/apps"
          cp -f hedera-node/configuration/update/immediate.sh "${BUILD_BASE_DIR}"
          cp -f hedera-node/configuration/update/during-freeze.sh "${BUILD_BASE_DIR}"

          echo "folder=${BUILD_BASE_DIR}" >>"${GITHUB_OUTPUT}"

      - name: Write Artifact Version Descriptor
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          printf "VERSION=%s\nCOMMIT=%s\nDATE=%s" "${{ steps.effective-version.outputs.number }}" "${{ steps.parameters.outputs.commit-id-short }}" "$(date -u)" \
            | tee VERSION

      - name: Create Artifact Archive
        id: artifact-release
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          POLICY="${{ inputs.version-policy }}"
          ARTIFACT_BASE_DIR="${HOME}/artifact-release"
          mkdir -p "${ARTIFACT_BASE_DIR}"

          if [[ "${POLICY}" == "branch-commit"  ]]; then
            ARTIFACT_NAME="build-${{ steps.parameters.outputs.branch-name-lower }}-${{ steps.parameters.outputs.commit-id-short }}"
          else
            ARTIFACT_NAME="build-v${{ steps.effective-version.outputs.number }}"
          fi

          ARTIFACT_FILE="${ARTIFACT_BASE_DIR}/${ARTIFACT_NAME}.zip"
          deterministic-zip -D -vr "${ARTIFACT_FILE}" *

          echo "folder=${ARTIFACT_BASE_DIR}" >>"${GITHUB_OUTPUT}"
          echo "name=${ARTIFACT_NAME}" >>"${GITHUB_OUTPUT}"
          echo "file=${ARTIFACT_FILE}" >>"${GITHUB_OUTPUT}"

      - name: Compute SHA Hash
        working-directory: ${{ steps.artifact-release.outputs.folder }}
        run: |
          ARTIFACT_NAME="${{ steps.artifact-release.outputs.name }}"
          sha384sum "${ARTIFACT_NAME}.zip" | tee "${ARTIFACT_NAME}.sha384"

      - name: Upload Artifacts (DevOps GCP Bucket)
        uses: google-github-actions/upload-cloud-storage@a5b77a3bf84da1791719585d327e5f90ae5cb53c # pin@v1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          path: ${{ steps.artifact-release.outputs.folder }}
          destination: ${{ secrets.bucket-name }}
          parent: false

      - name: Notify Jenkins of Release (Integration)
        id: jenkins-integration
        uses: fjogeleit/http-request-action@86014825e97036cd3e0903bbc72b3c5fff7474c4 # pin@v1
        if: ${{ inputs.dry-run-enabled != true && inputs.trigger-env-deploy == 'integration' && !cancelled() && !failure() }}
        with:
          url: ${{ secrets.jenkins-integration-url }}
          data: ${{ toJSON(github.event) }}

      - name: Display Jenkins Payload
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response || steps.jenkins-preview.outputs.response }}
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        run: |
          jq '.' <<<"${JSON_RESPONSE}"
          printf "### Jenkins Response Payload\n\`\`\`json\n%s\n\`\`\`\n" "$(jq '.' <<<"${JSON_RESPONSE}")" >>"${GITHUB_STEP_SUMMARY}"

      - name: Check for Jenkins Failures (Integration)
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response }}
        run: |
          INTEGRATION_TRIGGERED="$(jq '.jobs."build-upgrade-integration".triggered' <<<"${JSON_RESPONSE}")"
          DOCKER_TRIGGERED="$(jq '.jobs."build-upgrade-integration-docker".triggered' <<<"${JSON_RESPONSE}")"

          if [[ "${INTEGRATION_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

          if [[ "${DOCKER_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration-docker' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

  local-node-images:
    name: Local Node Images
    runs-on: [ self-hosted, Linux, large, ephemeral ]
    needs:
      - Artifact
    if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # pin@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Set Image Registry
        id: set-registry
        run: |
         DOCKER_REGISTRY="gcr.io"
         [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && DOCKER_REGISTRY="us-docker.pkg.dev"
         echo "docker-registry=${DOCKER_REGISTRY}" >>"${GITHUB_OUTPUT}"

         DOCKER_TAG_BASE="gcr.io/hedera-registry"
         [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && DOCKER_TAG_BASE="us-docker.pkg.dev/swirlds-registry/local-node"
         echo "docker-tag-base=${DOCKER_TAG_BASE}" >>"${GITHUB_OUTPUT}"

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # pin@v2

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@16c0bc4a6e6ada2cfd8afd41d22d95379cf7c32a # pin@v2

      - name: Docker Login
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # pin@v2
        with:
          registry: ${{ steps.set-registry.outputs.docker-registry }}
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}

      - name: Cache Build Artifacts
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # pin@v3
        with:
          fail-on-cache-miss: true
          path: ~/artifact-build
          key: node-build-artifacts-${{ needs.Artifact.outputs.version }}-${{ github.sha }}

      - name: Stage SDK Artifacts
        run: |
          mkdir -p hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk
          cp -rvf ~/artifact-build/* hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk/

      - name: Build Haveged Image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # pin@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-haveged
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.Artifact.outputs.version }}

      - name: Build Base Image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # pin@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-base
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.Artifact.outputs.version }}

      - name: Build Network Node Image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # pin@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
           IMAGE_TAG=${{ needs.Artifact.outputs.version }}
           IMAGE_PREFIX=${{ steps.set-registry.outputs.docker-tag-base }}/
          context: hedera-node/infrastructure/docker/containers/local-node/main-network-node
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.Artifact.outputs.version }}

      - name: Render Job Summary
        run: |
          printf "### Published Docker Images\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| Image Name | Version | URL | Supported Architectures |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| ---------- | ------- | --- | ----------------------- |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base" \
            "${{ needs.Artifact.outputs.version }}" \
            "[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.Artifact.outputs.version }})" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged" \
            "${{ needs.Artifact.outputs.version }}" \
            "[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.Artifact.outputs.version }})" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node" \
            "${{ needs.Artifact.outputs.version }}" \
            "[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.Artifact.outputs.version }})" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "\n\n" >> "${GITHUB_STEP_SUMMARY}"
